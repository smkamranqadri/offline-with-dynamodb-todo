service: sls-offline-with-dynamodb-hello-world

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  
custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: false
    migration:
      dir: offline/migrations
      
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  profile: test
  environment:
    TODO_DYNAMODB_TABLE: ${self:provider.stage}-todo
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODO_DYNAMODB_TABLE}"

functions:
  addTodo:
    handler: dist/handler.addTodo
    events:
      - http:
          path: todo
          method: post
          cors: true
  updateTodo:
    handler: dist/handler.updateTodo
    events:
      - http:
          path: todo/{id}
          method: put
          cors: true
  deleteTodo:
    handler: dist/handler.deleteTodo
    events:
      - http:
          path: todo/{id}
          method: delete
          cors: true
  getTodo:
    handler: dist/handler.getTodo
    events:
      - http:
          path: todo/{id}
          method: get
          cors: true
  getTodos:
    handler: dist/handler.getTodos
    events:
      - http:
          path: todo
          method: get
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TODO_DYNAMODB_TABLE}